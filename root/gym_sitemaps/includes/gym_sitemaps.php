<?php
/**
*
* @package phpBB SEO GYM Sitemaps
* @version $Id: gym_sitemaps.php 2007/04/12 13:48:48 dcz Exp $
* @copyright (c) 2006 dcz - www.phpbb-seo.com
* @license http://opensource.org/osi3.0/licenses/lgpl-license.php GNU Lesser General Public License
*
*/
// First basic security
if ( !defined('IN_PHPBB') ) {
	exit;
}
require_once($phpbb_root_path . 'gym_sitemaps/includes/gym_common.' . $phpEx);
// For Compatibility with the phpBB SEO mod rewrites
if (empty($phpbb_seo)) {
	require_once($phpbb_root_path . 'gym_sitemaps/includes/phpbb_seo_class_light.' . $phpEx);
	$phpbb_seo = new phpbb_seo();
	define('STARTED_LIGHT', true);
}
/**
* gym_sitemaps Class
* www.phpBB-SEO.com
* @package phpBB SEO
*/
class gym_sitemaps {
	// $_GET vars
	var $actions = array();
	// Working vars
	var $gym_config = array();
	var $override = array();
	var $override_type = array();
	var $gym_output;
	var $output_data = array();
	var $cache_config = array();
	var $yahoo_config = array();
	var $ext_config = array();
	var $gzip_config = array();
	var $style_config = array();
	/**
	* constuctor
	*/
	function gym_sitemaps($action_type = '') {
		global $phpEx, $phpbb_seo, $user, $config, $phpbb_root_path, $_action_types, $_override_types;
		$start_time = $phpbb_seo->microtime_float();
		// Set default values
		$this->gym_config = $this->actions = array();
		$this->override_type = $_override_types;
		$this->actions['action_types'] = $_action_types;
		$this->actions['action_type'] = in_array($action_type, $this->actions['action_types']) ? $action_type : '';
		$this->actions['extra_params'] = $this->actions['extra_params_full'] = $this->actions['auth_param'] = $this->actions['sql_report_msg'] = '';
		$this->actions['auth_guest_list'] = array();
		$this->actions['robots_patterns'] = array();
		if (empty($this->actions['action_type']) ) {
			$this->gym_error(403, '', __FILE__, __LINE__);
		}
		// Grab required config
		obtain_gym_config($this->actions['action_type'], $this->gym_config);
		// Set the overidding options
		$this->set_override();
		$this->path_config = array('gym_path' => $phpbb_root_path . 'gym_sitemaps/',
			'gym_img_url' => $phpbb_seo->seo_path['phpbb_url'] . 'gym_sitemaps/images/');
		// The main array
		$this->output_data = array('microtime'=> $start_time,
			'time'	=> time(),
			'mem_usage' => 0,
			'gen_data' => '',
			'gen_out' => '',
			'url_sofar' => 0,
			'url_sofar_total' => 0,
			'showstats' => 0,
			'data' => '',
			'expires_time' => 0,
		);
		$this->url_config = array( 'start_default' => '&amp;start=',
			'google_default' => "sitemap.$phpEx",
			'html_default' => "sitemaps.$phpEx",
			'rss_default' => "gymrss.$phpEx",
			'gzip_ext_out' => '',
			'zero_dupe' => (boolean) $this->gym_config['gym_zero_dupe'],
			'uri' => $phpbb_seo->seo_path['uri'],
		);
		$this->gzip_config = array('gzip_level' => (int) $this->gym_config['gym_gzip_level']);
		$this->cache_config = array( 
			'do_cache' => true, // this is used when preventing the caching of private content.
			'cached' => 'false',
			'mod_since' => (boolean) $this->gym_config['gym_mod_since'],
		);
		// Clear buffer, just in case it was started elswhere
		while (@ob_end_clean());
		return;
	}
	/**
	* init_get_vars ().
	* Get and check the basic get vars
	* @access private
	*/
	function init_get_vars() {
		// Builds the action_modules array
		$this->init_action_modules();
		// Basic options : gymfile.php?var(=value)
		$this->actions['module_main'] = $this->actions['module_sub'] = '';
		foreach ($this->actions['action_modules'] as $module) {
			if (isset($_GET[$module])) {
				$this->actions['module_main'] = $module;
				$this->actions['module_sub'] = !empty($_GET[$module]) ? trim(utf8_htmlspecialchars(str_replace(array("\n", "\r"), '', $_GET[$module]))) : '';
				unset($_GET[$module]);
			}
		}
		return;
	}
	/**
	* init_action_modules ().
	* Build the autogenerated array of all expected actions
	* @access private
	*/
	function init_action_modules() {
		global $cache, $phpEx;
		if (($this->actions['action_modules'] = $cache->get('_gym_action_' . $this->actions['action_type'])) === false) {
			$dir = @opendir( $this->path_config['gym_path'] . 'modules' );
			$action_from_file = '';
			while( ($file = @readdir($dir)) !== FALSE ) {
				if(preg_match('`^' . $this->actions['action_type'] . '_[a-z0-9_-]+\.' . $phpEx . '$`i', $file)) {
					$action_from_file = trim(str_replace( $this->actions['action_type'] . '_', '' , str_replace('.' . $phpEx , '' ,$file)), "/");
					if (@$this->gym_config[$this->actions['action_type'] . '_' . $action_from_file . '_installed']) {
						$this->actions['action_modules'][$action_from_file] = $action_from_file;
					}
				}
			}
			@closedir($dir);
			if (empty($this->actions['action_modules'])) {
				$this->actions['action_modules'] = array ();
			}
			$cache->put('_gym_action_' . $this->actions['action_type'], $this->actions['action_modules']);
		}
	}
	/**
	* load_modules ( $module_type, $method = '' ).
	* loads all modules for a given action_type
	* Optional, starts a method
	* @access private
	*/
	function load_modules( $method = ''  ) {
		foreach ( $this->actions['action_modules'] as $module ) {
			$this->load_module( $this->actions['action_type'] . "_$module", $method);
		}
	}
	/**
	* load_module ( $module_class, $method = '' ).
	* loads a module for a given action
	* Optional, starts a method
	* @access private
	*/
	function load_module( $module_class, $method = '' ) {
		global $phpEx;
		$module_file = $this->path_config['gym_path'] . 'modules/' . $module_class . '.' . $phpEx;
		if ( file_exists($module_file) && @$this->gym_config[$module_class . '_installed']) {
			include_once($module_file);
			if (class_exists($module_class)) {
				$gym_module = new $module_class($this);
				if ( !empty($method) && method_exists($gym_module, $method)) {
					$gym_module->$method();
				}
			}
		} else {
			$this->gym_error(500, '', __FILE__, __LINE__);
		}
	}
	/**
	* gym_init_output ()
	* In case we need to hanlde the output
	* @access private
	*/
	function gym_init_output() {
		global $phpEx;
		include_once($this->path_config['gym_path'] . 'includes/gym_output.' . $phpEx);
		$this->gym_output = new gym_output($this);
	}
	/**
	* username_string()
	* a wrapper for get_username_string()
	* @access private
	*/
	function username_string($user_id, $user_name, $user_color, $link = false) {
		global $phpbb_root_path, $phpEx;
		$profile_url = '';
		$user_color = ($user_color) ? '#' . $user_color : '';
		if ($link && $user_id) {
			$profile_url = append_sid($phpbb_root_path . 'memberlist.' . $phpEx . '?mode=viewprofile&amp;u=' . (int) $user_id);
		}
		$tpl = '';
		if (!$profile_url && !$user_color) {
			$tpl = '<b>{USERNAME}</b>';
		} elseif (!$profile_url && $user_color) {
			$tpl = '<span style="color: {USERNAME_COLOUR};"><b>{USERNAME}</b></span>';
		} elseif ($profile_url && !$user_color) {
			$tpl = '<a href="{PROFILE_URL}"><b>{USERNAME}</b></a>';
		} elseif ($profile_url && $user_color) {
			$tpl = '<a href="{PROFILE_URL}" style="color: {USERNAME_COLOUR};"><b>{USERNAME}</b></a>';
		}
		return str_replace(array('{PROFILE_URL}', '{USERNAME_COLOUR}', '{USERNAME}'), array($profile_url, $user_color, $user_name), $tpl);
	}
	/**
	* set_module_option($config_key, $override ='')
	* will check if a module config value is available
	* Set it or use the main type default value or the main global value
	* Globale module value is used when cyclying through modules ( $this->actions['module_main'] = '' )
	* $override = global => global config
	* $override = output_type => module config
	* $override = module => sub module config
	* degrades to the global config in case there is no better otpion
	* @access private
	*/
	function set_module_option($config_key, $override = OVERRIDE_MODULE) {
		$cond = '';
		// Check if we have a sub module option
		if ( ($override == OVERRIDE_MODULE) && @isset($this->gym_config[$this->actions['action_type'] . '_' . $this->actions['module_main'] . "_$config_key"]) ) {
			return $this->gym_config[$this->actions['action_type'] . '_' . $this->actions['module_main'] . "_$config_key"];
		}
		// Else look for an output type option
		if ( ($override != OVERRIDE_GLOBAL) && @isset($this->gym_config[$this->actions['action_type'] . "_$config_key"]) ) {
			return $this->gym_config[$this->actions['action_type'] . "_$config_key"];

		}
		// Else return the global config value or the next available valid option from the output type to the module level or null
		return isset($this->gym_config["gym_$config_key"]) ? $this->gym_config["gym_$config_key"] : ( @isset($this->gym_config[$this->actions['action_type'] . "_$config_key"]) ? $this->gym_config[$this->actions['action_type'] . "_$config_key"] : ( @isset($this->gym_config[$this->actions['action_type'] . '_' . $this->actions['module_main'] . "_$config_key"]) ? $this->gym_config[$this->actions['action_type'] . '_' . $this->actions['module_main'] . "_$config_key"] : null) );
	}
	/**
	* set_override()
	* Will set the three levels of overriding
	*/
	function set_override() {
		foreach ($this->override_type as $type) {
			$this->override[$type] = $this->_set_override($type);
		}
		$this->override[$this->actions['action_type']] = $this->gym_config[$this->actions['action_type'] . '_override'];
		return;
	}
	/**
	* _set_override()
	* helper for set_override()
	*/
	function _set_override($type) {
		$main_key = 'gym_override_' . $type;
		$mode_key = $this->actions['action_type'] . '_override_' . $type;
	//	$module_key = !empty($this->actions['module_main']) ? $this->actions['action_type'] . '_' . $this->actions['module_main'] . '_override_' . $type : 0;
		if ($this->gym_config['gym_override']) { // if top level overrinding is activated
			return ($this->gym_config[$main_key] != OVERRIDE_GLOBAL)  ? ($this->gym_config[$mode_key] != OVERRIDE_GLOBAL ? $this->gym_config[$mode_key] : $this->gym_config[$main_key]) : OVERRIDE_GLOBAL;
		} else {
			return $this->gym_config[$mode_key];
		}
	}
	/**
	* A wrapper for htmlspecialchars($value, ENT_COMPAT, 'UTF-8')
	*/
	function utf8_htmlspecialchars($value) {
		return htmlspecialchars($value, ENT_COMPAT, 'UTF-8');
	}
	/**
	 * xml_encode() 
	 * helper
	 */
	function xml_encode($utf8_string) {
		return numeric_entify_utf8($this->utf8_htmlspecialchars($utf8_string));
	}
	/**
	* check_forum_auth() 
	* Returns an array of unauthed forum ids
	* Will only accept postable forums.
	*/
	function check_forum_auth($exclude_list, $guest_auth = true) {
		global $auth, $db, $user, $cache;
		$need_cache = false;
		if (!is_array($exclude_list)) {
			$exclude_list = array();
		}
		// First check the public forum list
		if (($this->actions['auth_guest_list'] = $cache->get('_gym_config_' . $this->actions['action_type'] . '_forum_guest' )) === false) {
			$this->actions['auth_guest_list'] = array();
			$guest_data = array('user_id' => ANONYMOUS,
				'user_type' => USER_IGNORE,
				'user_permissions' => '',
			);
			$auth->acl($guest_data);
			// the unwanted forum id array
			$forum_read_ary = $auth->acl_getf('!f_read');
			foreach ($forum_read_ary as $forum_id => $not_allowed) {
				if ($not_allowed['f_read']) {
					$forum_id = (int) $forum_id;
					$this->actions['auth_guest_list'][$forum_id] = $forum_id;
				}
			}
			if ($user->data['is_registered']) {
				$auth->acl($user->data);
			}
			$need_cache = true;
		}
		// Filter non postable forum and forum with password
		if (($not_to_list = $cache->get('_gym_config_' . $this->actions['action_type'] . '_forum_skip' )) === false) {
			if (!$not_to_list) {
				$not_to_list = array();
			}
			$not_in_id_sql = !empty($this->actions['auth_guest_list']) ?  ' WHERE ' . $db->sql_in_set('forum_id', $this->actions['auth_guest_list'], true) . ' AND ' : ' WHERE ';
			$sql = "SELECT forum_id
				FROM " . FORUMS_TABLE . $not_in_id_sql . " forum_type <> " . FORUM_POST . " OR forum_password <> ''";
			$result = $db->sql_query($sql);
			while ( $row = $db->sql_fetchrow($result) ) {
				$forum_id = (int) $row['forum_id'];
				$not_to_list[$forum_id] = $forum_id;
			}
			$db->sql_freeresult($result);
			ksort($not_to_list);
			$cache->put('_gym_config_' . $this->actions['action_type'] . '_forum_skip' , $not_to_list);
		}
		if ($need_cache) {
			// add the exclude list ids
			if (!empty($exclude_list)) {
				foreach ($exclude_list as $forum_id) {
					$forum_id = (int) $forum_id;
					$this->actions['auth_guest_list'][$forum_id] = $forum_id;
				}
			}
			// add the non postable forum and forum with password
			if (!empty($not_to_list)) {
				foreach ($not_to_list as $forum_id) {
					$forum_id = (int) $forum_id;
					$this->actions['auth_guest_list'][$forum_id] = $forum_id;
				}
			}
			ksort($this->actions['auth_guest_list']);
			$cache->put('_gym_config_' . $this->actions['action_type'] . '_forum_guest' , $this->actions['auth_guest_list']);
		}
		if ($guest_auth) { // sometime, we need to check guest auths, even if user is registered
			$this->actions['auth_param'] = implode('-', $this->actions['auth_guest_list']);
			return $this->actions['auth_guest_list'];
		}
		// else handle the real auth
		$forum_read_ary = $auth->acl_getf('!f_read');
		foreach ($forum_read_ary as $forum_id => $not_allowed) {
			if ($not_allowed['f_read']) {
				$forum_id = (int) $forum_id;
				$exclude_list[$forum_id] = $forum_id;
			}
		}
		// And the non postable forums
		if (!empty($not_to_list)) {
			foreach ($not_to_list as $forum_id) {
				$forum_id = (int) $forum_id;
				$exclude_list[$forum_id] = $forum_id;
			}
		}
		ksort($exclude_list);
		$this->actions['auth_param'] = implode('-', $exclude_list);
		return $exclude_list;
	}
	/**
	* obtain_robots_disallows()
	* obtain the eventual robots.txt exclusions 
	* and parse them into a patern array for later use
	* @access private
	*/
	function obtain_robots_disallows() {
		global $phpbb_root_path, $phpbb_seo, $cache, $phpEx;
		if (function_exists('file_get_contents')) {
			// Build the domain root path
			$phpbb_real_path = trim(phpbb_realpath($phpbb_root_path), '/');
			$root_real_path = str_replace(trim($phpbb_seo->seo_path['phpbb_script'], '/'), '', $phpbb_real_path);
			if (file_exists($root_real_path . '/robots.txt')) {
				$time_created = filemtime($root_real_path . '/robots.txt');
				if (($this->actions['robots_patterns'] = $cache->get('_gym_config_robots_regex' )) === false) {
					$robots = file_get_contents($root_real_path . '/robots.txt');
					preg_match_all('`^Disallow[\s]*:[\s]*([a-z0-9_\.&;\?,:/-]+)[\s]*$`im', $robots, $matches,PREG_SET_ORDER);
					if (!empty($matches[0][1])) {
						foreach ($matches as $match) {
							if (!empty($match[1])) {
								$this->actions['robots_patterns'][] = $phpbb_seo->seo_path['root_url'] . trim($match[1], '/');
							}
						}
					}
					$this->actions['robots_patterns']['date'] = $time_created;
					$cache->put('_gym_config_robots_regex' , $this->actions['robots_patterns']);
				} elseif ($this->actions['robots_patterns']['date'] < $time_created) { // robots.tx was updated
					$cache->remove_file($cache->cache_dir . "data_gym_config_robots_regex.$phpEx");
					$this->obtain_robots_disallows();
				}

			}
		}
		return;
	}
	/**
	* is_robots_disallowed()
	* checks if an url is disallowed by the robots.txt patterns
	* @access private
	*/
	function is_robots_disallowed($url) {
		if (!empty($this->actions['robots_patterns'])) {
			foreach($this->actions['robots_patterns'] as $pattern) {
				if (stripos( $url, $pattern) !== false) {
					return true;
				}
			}
		}
		return false;
	}
	/**
	* set_exclude_list($id_list) will build up the public unauthed ids
	* @access private
	*/
	function set_exclude_list($id_list) {
		$exclude_list = ( empty($id_list) ? array() : explode(',', $id_list) );
		$ret = array();
		foreach ($exclude_list as $key => $value ) {
			$ret[intval($value)] = intval($value);
		}
		return $ret;
	}
	/**
	* set_exclude_list($id_list) will build up the public unauthed ids
	* @access private
	*/
	function set_not_in_list($id_list = array(), $field = '', $and = '') {
		if ( !empty($id_list) && is_array($id_list) ) {
			$not_in_id_sql = " $field NOT IN (" . implode(",", array_map('intval', $id_list)) . ") $and ";
		} else {
			$not_in_id_sql = '';
		}
		return $not_in_id_sql;
	}
	/**
	* is_forum_public($forum_id) Will tell if a forum is publicly viewable (auth guest)
	* @access private
	*/
	function is_forum_public($forum_id) {
		return (isset($this->actions['auth_guest_list'][$forum_id]) ? false : true);
	}

	// --> Others <--
	/**
	* forum_url() builds forum url with proper options
	* Suffixe is not added here, to properly deal with pagination
	*/
	function forum_url($forum_name, $forum_id) {
		global $phpbb_seo;
		return $phpbb_seo->seo_path['phpbb_urlR'] . (!empty($this->url_config['forum_pre']) ? $this->url_config['forum_pre'] .  $forum_id : $phpbb_seo->set_url($forum_name, $forum_id, $phpbb_seo->seo_static['forum']) );
	}
	/**
	* topic_url($topic_title, $topic_id, $forum_url, $forum_id) builds forum url with proper options
	* Suffixe is not added here, to properly deal with pagination
	*/
	function topic_url($topic_title, $topic_id, $forum_url, $forum_id) {
		global $phpbb_seo;
		return ( $phpbb_seo->seo_opt['virtual_folder'] ? $forum_url : $phpbb_seo->seo_path['phpbb_urlR'] ) . ( !empty($this->url_config['topic_pre']) ? sprintf($this->url_config['topic_pre'], $forum_id, $topic_id) : $phpbb_seo->format_url($topic_title) . $phpbb_seo->seo_delim['topic'] .  $topic_id );
	}
	/**
	* Returns usable start param
	* -xx
	*/
	function set_start($start, $delim) {
		global $phpbb_seo;
		return ( $start > 0  ? ($delim == '/' ? $phpbb_seo->seo_static['pagination'] . intval($start) . $phpbb_seo->seo_ext['pagination'] : $phpbb_seo->seo_delim['start'] . intval($start) ) : '' ) . $delim;
	}
	/**
	* parse_link() builds an html link
	*/
	function parse_link($url, $title = '', $tag_arround = '') {
		global $config;
		static $linktpl = '%4$s<a href="%1$s" %2$s>%3$s</a>%5$s';
		$title_tag = $tag1 = $tag2 = '';
		if (empty($title) ) {
			$title = $url;
		} else {
			$title_tag = 'title="' . $title . '"';
		}
		if (!empty($tag_arround)) {
			$tag1 = "<$tag_arround>";
			$tag2 = "</$tag_arround>";
		}
		return sprintf($linktpl, $url, $title_tag, $title, $tag1, $tag2);
	}
	/**
	* seo_kill_dupes($url) will kill duplicates when pages are not cached
	* @access private
	*/
	function seo_kill_dupes($url) {
		if ($this->url_config['zero_dupe']) {
			$requested_url = ltrim($this->url_config['uri'], '/');
			$url = str_replace('&amp;', '&', $url);
			if ( !($requested_url === $url) ) {
				$this->gym_redirect($url);
			}
		}
		return;
	}
	/**
	* Custom HTTP 301 redirections.
	* To kill duplicates
	*/
	function gym_redirect($url, $header = "301 Moved Permanently", $code = 301, $replace = TRUE) {
		if (strstr(urldecode($url), "\n") || strstr(urldecode($url), "\r") || strstr(urldecode($url), ';url')) {
			$this->gym_error(400, '',  __FILE__, __LINE__);
		}
		$http = "HTTP/1.1 ";
		header($http . $header, $replace, $code);
		header("Location:" . $url);
		$this->safe_exit();
	}
	/**
	* gym_error(($errno, $msg_text, $errfile, $errline)
	* Will properly handle error for all cases, admin always get full debug
	* Partly based on msg_handler()
	* @access private
	*/
	function gym_error($errno = 0, $msg_key = '', $errfile = '', $errline = '', $sql = '') {
		global $user, $phpbb_seo, $auth;
		$http_codes = array (
			400 => 'TTP/1.1 400 Bad Request',
			401 => 'HTTP/1.1 401 Unauthorized',
			403 => 'HTTP/1.1 403 Forbidden',
			404 => 'HTTP/1.1 404 Not Found',
			405 => 'HTTP/1.1 405 Method Not Allowed',
			406 => 'HTTP/1.1 406 Not Acceptable',
			410 => 'HTTP/1.1 410 Gone',
			500 => 'HTTP/1.1 500 Internal Server Error',
			503 => 'HTTP/1.1 503 Service Unavailable',
		);
		$header = array_key_exists ($errno, $http_codes) ? $http_codes[$errno] : '';
		$l_notify = '';
		if (!empty($user) && !empty($user->lang)) {
			$msg_title = (empty($msg_key)) ? ( !empty($user->lang['GYM_ERROR_' . $errno]) ? $user->lang['GYM_ERROR_' . $errno] :  $user->lang['GENERAL_ERROR'] ) : ((!empty($user->lang[$msg_key])) ? $user->lang[$msg_key] : $msg_key);
			$msg_text = (!empty($user->lang[$msg_key . '_MSG'])) ? $user->lang[$msg_key . '_MSG'] : (!empty($msg_key) ?  $msg_title : ( !empty($header) ? $header : $msg_title) );
			$l_return_index = sprintf($user->lang['RETURN_INDEX'], '<a href="' . $phpbb_seo->seo_path['phpbb_url'] . '">', '</a>');
			if ( ( $errno == 500 || $errno == 503 ) && !empty($config['board_contact'])) {
				$l_notify = '<p>' . sprintf($user->lang['NOTIFY_ADMIN_EMAIL'], $config['board_contact']) . '</p>';
			}
		} else {
			$msg_title = 'GYM Sitemaps General Error';
			$l_return_index = '<a href="' . $phpbb_seo->seo_path['phpbb_url'] . '">Return to index page</a>';
			if ( ( $errno == 500 || $errno == 503 ) && !empty($config['board_contact'])) {
				$l_notify = '<p>Please notify the board administrator or webmaster: <a href="mailto:' . $config['board_contact'] . '">' . $config['board_contact'] . '</a></p>';
			}
		}
		if (@$auth->acl_get('a_')) {
			$msg_text .= '<br/>' . (!empty($errfile) ? "<br/><b>File :</b> $errfile<br/>" : '');
			$msg_text .= !empty($errline) ? "<br/><b>Line :</b> $errline<br/>" : '';
			$msg_text .= !empty($sql) ? "<br/><b>Sql :</b>  $sql<br/>" : '';
		}
		if ( !empty($header) ) {
			header($header);
		}
		header ('Content-Type: text/html');
		echo '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';
		echo '<html xmlns="http://www.w3.org/1999/xhtml" dir="ltr">';
		echo '<head>';
		echo '<meta http-equiv="content-type" content="text/html; charset=utf-8" />';
		echo '<title>' . $msg_title . '</title>';
		echo '<style type="text/css">' . "\n" . '<!--' . "\n";
		echo '* { margin: 0; padding: 0; } html { font-size: 100%; height: 100%; margin-bottom: 1px; background-color: #E4EDF0; } body { font-family: "Lucida Grande", Verdana, Helvetica, Arial, sans-serif; color: #536482; background: #E4EDF0; font-size: 62.5%; margin: 0; } ';
		echo 'a:link, a:active, a:visited { color: #006699; text-decoration: none; } a:hover { color: #DD6900; text-decoration: underline; } ';
		echo '#wrap { padding: 0 20px 15px 20px; min-width: 615px; } #page-header { text-align: right; height: 40px; } #page-footer { clear: both; font-size: 1em; text-align: center; } ';
		echo '.panel { margin: 4px 0; background-color: #FFFFFF; border: solid 1px  #A9B8C2; } ';
		echo '#errorpage #page-header a { font-weight: bold; line-height: 6em; } #errorpage #content { padding: 10px; } #errorpage #content h1 { line-height: 1.2em; margin-bottom: 0; color: #DF075C; } ';
		echo '#errorpage #content div { margin-top: 20px; margin-bottom: 5px; border-bottom: 1px solid #CCCCCC; padding-bottom: 5px; color: #333333; font: bold 1.2em "Lucida Grande", Arial, Helvetica, sans-serif; text-decoration: none; line-height: 120%; text-align: left; } ';
		echo "\n" . '//-->' . "\n";
		echo '</style>';
		echo '</head>';
		echo '<body id="errorpage">';
		echo '<div id="wrap">';
		echo '	<div id="page-header">';
		echo '		' . $l_return_index;
		echo '	</div>';
		echo '	<div id="acp">';
		echo '	<div class="panel">';
		echo '		<div id="content">';
		echo '			<h1>' . $msg_title . '</h1>';	
		echo '			<div>' . $msg_text . '</div>';
		echo $l_notify;
		echo '		</div>';
		echo '	</div>';
		echo '	</div>';
		echo '	<div id="page-footer">';
		echo '		Powered by phpBB &copy; 2000, 2002, 2005, 2007, 2008 <a href="http://www.phpbb.com/">phpBB Group</a><br/>';
		echo '		GYM Sitemaps &amp; RSS &copy; 2006, 2007, 2008 <a href="http://www.phpbb-seo.com/">phpBB SEO</a>';
		echo '	</div>';
		echo '</div>';
		echo '</body>';
		echo '</html>';	
		$this->safe_exit();
		return;
	}
	/**
	* For a safe exit
	* @access private
	*/
	function safe_exit() {
		garbage_collection();
		exit_handler();
		exit;
	}
}
?>
